//
// Motors.h
// Управление моторами (Класс может быть создан в одном экземпляре)
//

#include <stdint.h>

#ifndef MOTORS_H_
#define MOTORS_H_

    class Motors
    {
    private:
        // Значение угла левого двигателя вертикального перемещения
        uint8_t VL;
        // Значение угла правого двигателя вертикального перемещения
        uint8_t VR;
        // Значение угла левого двигателя горизонтального перемещения
		uint8_t HL;
		// Значение угла правого двигателя горизонтального перемещения
		uint8_t HR;
        // Значение угла левого двигателя доп. перемещения
		uint8_t XL;
		// Значение угла правого двигателя доп. перемещения
		uint8_t XR;
		// Значение угла руки-хвата
		uint8_t Hand;

        // Пересчёт угла поворота сервопривода в эквивалентную длину импульса
        //  Angle: угол поворота поворотного сервопривода
        // return: длина импульса, мкс
        uint16_t CalcTime(uint8_t Angle);

		// Задать скважность ШИМ
		// Index: номер канала серво
		// Angle: угол поворота поворотного сервопривода
		void SetAngle(uint8_t Index, uint8_t Angle);

		// Задать угол для всех моторов
		// Angle: угол поворота поворотного сервопривода
		void SetAll(uint8_t Angle);

		// Процедура включения всех моторов
		void Startup();

    public:
        // Инициализация периферии
        void Init();

        // Задать длину импульса для левого двигателя вертикальной ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetVL(uint8_t Angle);
        // Задать длину импульса для правого двигателя вертикальной ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetVR(uint8_t Angle);
        // Задать длину импульса для левого двигателя горизонтальной ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetHL(uint8_t Angle);
        // Задать длину импульса для правого двигателя горизонтальной ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetHR(uint8_t Angle);
        // Задать длину импульса для левого двигателя доп. ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetXL(uint8_t Angle);
        // Задать длину импульса для правого двигателя доп. ориентации
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetXR(uint8_t Angle);
        // Задать длину импульса для двигателя руки-хвата
        // Angle: угол поворота поворотного сервопривода (как эквивалент ширины импульса)
        void SetHand(uint8_t Angle);

        // Значение угла левого двигателя вертикального перемещения
        uint8_t GetVL();
        // Значение угла правого двигателя вертикального перемещения
        uint8_t GetVR();
        // Значение угла левого двигателя горизонтального перемещения
		uint8_t GetHL();
		// Значение угла правого двигателя горизонтального перемещения
		uint8_t GetHR();
        // Значение угла левого двигателя доп. перемещения
		uint8_t GetXL();
		// Значение угла правого двигателя доп. перемещения
		uint8_t GetXR();
		// Значение угла руки-хвата
		uint8_t GetHand();

        // Задать угол поворота камеры (пока что не работает)
        // Angle: угол поворота поворотного сервопривода
        void SetCam(uint8_t Angle);

        // Разрешить или запретить генерацию испульсов
        // Enabled: true, если генерация разрешена
        void SetState(bool Enabled);
		
		// Разрешена ли генерация ШИМ
		// return: true, если генерация разрешена
		bool GetState();
    };

#endif /* MOTORS_H_ */
