//
// Drone.h
// Класс управления роботом
// 

#include "Pressure.h"
#include "Motors.h"
#include "OrientationHMC5883.h"
#include "OrientationQMC5883.h"
#include "Navigation_mpu6050.h"
#include "QuickPID.h"
#include "Hand.h"
#include "Pump.h"

#ifndef DRONE_H_
#define DRONE_H_

	class Drone {
	private:
		// Промежуточное значение сигнала управления левого двигателя вертикальной ориентации
		int16_t  upLraw;
		// Промежуточное значение сигнала управления правого двигателя вертикальной ориентации
		int16_t  upRraw;
		// Промежуточное значение сигнала управления левого двигателя вертикальной ориентации
		int16_t  HLraw;
		// Промежуточное значение сигнала управления правого двигателя вертикальной ориентации
		int16_t  HRraw;
		// Промежуточное значение сигнала управления камерой
		uint8_t  CamPitch;

		// ПИД: объект-регулятор
		QuickPID pidDepth;
		// ПИД: текущая глубина (текущая величина регулируемого параметра), с датчика глубины (давления)
		float depth;
		// ПИД: выходная мощность (сила воздействия для возвращения регулируемого параметра в точнку уставки), на моторы
		float depth_power;
		// ПИД: Уставка (целевая/желаемая величина регулируемого параметра)
		float depth_target;

		// Флаг: глубина известна
		bool  depth_available;
		// Флаг: автоглубина
		bool  depth_auto;
		// Нулевая глубина
		float depth_zero;

		// Стабилизация курса
		bool  course_fix;

		// Использовать ли для управления моторами вертикальной ориентации переопределённые значения
		bool   OverrideVertical;
		// Использовать ли для управления моторами горизонательной ориентации переопределённые значения
		bool   OverrideHorisontal;
		// Переопределённый управляющий сигнал для левого мотора вертикальной ориентации (используется, если OverrideVertical==true)
		int8_t OverrideVL;
		// Переопределённый управляющий сигнал для правого мотора вертикальной ориентации (используется, если OverrideVertical==true)
		int8_t OverrideVR;
		// Переопределённый управляющий сигнал для левого мотора горизонтальной ориентации (используется, если OverrideHorisontal==true)
		int8_t OverrideHL;
		// Переопределённый управляющий сигнал для правого мотора горизонтальной ориентации (используется, если OverrideHorisontal==true)
		int8_t OverrideHR;

		// Скорость
		uint8_t speed;

#if defined(ENABLE_PRESSURE) && (ENABLE_PRESSURE > 0)
		// Датчик давления
		Pressure pressure;
#endif

#if defined(ENABLE_COMPASS) && (ENABLE_COMPASS > 0)
		// Магнитометр
		OrientationQMC5883 ori;
#endif

#if defined(ENABLE_NAVIGATION) && (ENABLE_NAVIGATION > 0)
		// Отслеживание ориентации
		NavigationMPU6050 navigation;
#endif
		// Реальный угол поворота  (-180 .. +180)
		float             ActualYaw;
		
		// Ожидаемый угол поворота (-180 .. +180)
		float             ExpectedYaw;
		
		// Ожидаемая курсовая скорость
		int8_t            ExpectedSpeed;
		
		// Смещение нуля курса (для сброса)
		float             YawOffset;
		
		// ПИД: объект-регулятор курса
		QuickPID pidYaw;
		// ПИД: ошибка курса
		float yaw_error;
		// ПИД: выходная мощность (сила воздействия для возвращения регулируемого параметра в точнку уставки), на моторы
		float yaw_power;
		// ПИД: целевая ошибка курса (0)
		float yaw_target;

		// ПИД: объект-регулятор крена
		QuickPID pidRoll;
		// ПИД: ошибка крена
		float roll_error;
		// ПИД: выходная мощность компенсации крена (сила воздействия для возвращения регулируемого параметра в точнку уставки), на моторы
		float roll_power;
		// ПИД: целевая ошибка крена (0)
		float roll_target;
		
		// Находится ли значение в указанном диапазоне (не включая границы)
		//  Value: проверяемое значение
		//    Min: нижняя граница диапазона
		//    Max: верхняя граница диапазона
		// return: true, если попадает
		bool IsInRange(uint8_t Value, uint8_t Min, uint8_t Max);

		// Управление горизонтальным движением
		//  ForwardVal: Значения с джойстика для движения вперёд-назад (левый джойстик, вверх-вниз)
		//  YawLeftVal: Значения с джойстика для горизонтельного поворота (левый джойстик, лево-право)
		void HorisontalMove(uint8_t ForwardVal, uint8_t YawLeftVal);

		// Управление вертикальным движением
		//       UpVal: Значения с джойстика для смены глубины (правый джойстик, вверх-вниз)
		// RollLeftVal: Значения с джойстика для смены угла крена (правый джойстик, лево-право)
		void VerticalMove(uint8_t UpVal, uint8_t RollLeftVal);

		// Пересчёт управляющего сигнала с учётом внесёноой зоны безопасности
		//  Value: входной сигнал с джойстика
		// return: исправленный сигнал джойстика (часть зоны управления отключена и смещена)
		uint8_t SafeZone(int8_t Value);

		// Расчёт ошибки угла поворота
		float CalcYawError(float ActualYaw);

		// Расчёт вертикальной силы для удержаия глубины
		void AutoDepth();

		// Расчёт повротов для удержания курса
		void AutoYaw();

		// Нормализация угла
		// Angle: угол
		// return: нормализованный угол (от -180 до 180)
		float NormalizeAngle(float Angle);

	public:
		// Конструктор
		Drone();

		// Управление моторами
		Motors  motors;

		// Управление рукой-хватом
		Hand    hand;

		// Управление насосом
		Pump    pump;
		
		// Инициализация периферии
		void Init();

		// Загрузить настройки
		void LoadSettings();
		
		// Задать скорость
		// Speed: скорость в процентах, 0 - 100%
		void SetSpeed(uint8_t Speed);

		// Обновить блокировку моторов
		// Lock: true, если заблокировано
		void UpdateLock(bool Lock);

		// Установлена ли блокировка мотора
		// return: true, если заблокировано
		bool IsMotorLocked();

		// Получить линейную скорость
		// return: текущая линейная скорость
		int16_t GetLinearSpeed();

		// Задать угол поворота камеры
		// CameraPitch: угол (0-180)
		void UpdateCamera(uint8_t CameraPitch);

		// Обновить параметры джойстика (верх-0,низ-255,лево-0,право-255)
		//       UpVal: Значения с джойстика для смены глубины (правый джойстик, вверх-вниз)
		// RollLeftVal: Значения с джойстика для смены угла крена (правый джойстик, лево-право)
		//  ForwardVal: Значения с джойстика для движения вперёд-назад (левый джойстик, вверх-вниз)
		//  YawLeftVal: Значения с джойстика для горизонтельного поворота (левый джойстик, лево-право)
		void UpdateJoystick(int8_t UpVal, int8_t RollLeftVal, int8_t ForwardVal, int8_t YawLeftVal);

		// Обновить параметры джойстика (верх-0,низ-255,лево-0,право-255)
		//  ForwardVal: Значения с джойстика для движения вперёд-назад (левый джойстик, вверх-вниз)
		//  YawLeftVal: Значения с джойстика для горизонтельного поворота (левый джойстик, лево-право)
		void UpdateJoystickH(int8_t ForwardVal, int8_t YawLeftVal);

		// Обновить параметры джойстика только по вертикали (верх-0,низ-255,лево-0,право-255)
		//       UpVal: Значения с джойстика для смены глубины (правый джойстик, вверх-вниз)
		// RollLeftVal: Значения с джойстика для смены угла крена (правый джойстик, лево-право)
		void UpdateJoystickV(int8_t UpVal, int8_t RollLeftVal);

		// Разрешить перезапись управления горизонтальными моторами
		// Value: значение сигнала управления для левого двигателя горизонтальной ориентации
		void EnableOverrideHL(int8_t Value);

		// Разрешить перезапись управления горизонтальными моторами
		// Value: значение сигнала управления для правого двигателя горизонтальной ориентации
		void EnableOverrideHR(int8_t Value);

		// Разрешить перезапись управления вертикальными моторами
		// Value: значение сигнала управления для левого двигателя вертикальной ориентации
		void EnableOverrideVL(int8_t Value);

		// Разрешить перезапись управления вертикальными моторами
		// Value: значение сигнала управления для правого двигателя вертикальной ориентации
		void EnableOverrideVR(int8_t Value);

		// Запретить перезапись управления вертикальными моторами
		void DisableOverrideV();

		// Запретить перезапись управления вертикальными моторами
		void DisableOverrideH();

		// Обновить все показания датчиков
		void UpdateSensors();

		// Отпустит контроль глубины
		void ReleaseDepth(void);

		// Зафиксировать текущую глубину
		void FixDepth(void);

		// Пересчитать управляющие значения на значения, используемые в моторах и применить их
		void SendToMotors();

		// Задать стабилизацию курса
		void SetCourseStab(bool Stab);
		
		// Задать стабилизацию глубины
		void SetDepthStab(bool Stab);

		// Перекалибровать датчики
		void Calibrate();

		// Получить желаемый курс (если включён модуль ориентации)
		// return: курс, градусы (-180, 180)
		float   getExpectedCourse();

		// Получить курс (если включён модуль ориентации)
		// return: курс, градусы (-180, 180)
		float   getCourse();

		// Текущий курс задать как 0
		void    ResetCourse();

		// Задать курс (если включён модуль ориентации)
		// Depth: курс, градусы (-180, 180)
		void    setCourse(float Course);
 
		// Получить крен
		// return: крен, градусы
		float   getRoll();

		// Получить тангаж
		// return: тангаж, градусы
		float   getPitch();

		// Получить скорость
		// return: скорость в процентах, 0 - 100%
		uint8_t getSpeed();

		// Получить глубину в см
		// return: глубина, см
		float   getDepth();

		// Получить ожидаемую глубину (в некоторых единицах)
		// return: глубина
		float   getExpectedDepth();

		// Задать глубину в см
		// Depth: глубина, см
		void    setDepth(float Depth);
 
		// Получить курсовой угол (в случае работы с компасом)
		// return: угол (!!!некорректный, нужна привязка к акселерометру или работа от гироскопа)
		int16_t getAngle();

		// Получить температуру воды (в случае работы с датчиком давления)
		// return: температура воды, в градусах
		int8_t  getTemp();
	};

#endif /* DRONE_H_ */
